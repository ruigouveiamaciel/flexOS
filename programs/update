
TXUI = require("/api/txui")
github = require("/api/github")

local w, h = term.getSize()
local window = TXUI.Window:new({
    w = w,
    h = h,
    tlColor = colors.black,
    bgColor = colors.gray
})

TXUI.Controller:addWindow(window)

window:setTitleLabel(TXUI.Label:new({
    text = " System Update",
    textColor = colors.white,
    textAlign = "left",
}))

local tiny = w < 30


local statusLabel = TXUI.Label:new({
    x = 1,
    y = tiny and (math.floor(h / 2 - 3) - 1) or (math.floor(h / 2 - 1) - 1),
    w = w,
    h = 5,
    text = "Checking for updates...",
    bgColor = window.bgColor,
    textColor = colors.white,
    vertCenter = true,
})

local updateButton = TXUI.Button:new({
    x = 4,
    y = tiny and math.ceil(h / 2 + 1) or math.ceil(h / 2 + 1),
    w = tiny and w - 6 or math.floor((w - 11) / 2),
    text = "Update",
    bgColor = colors.lightGray,
    activeColor = colors.lightGray,
    textColor = colors.gray,
    activeTextColor = colors.gray
})

local cancelButton = TXUI.Button:new({
    x = tiny and 4 or w - 3 - updateButton.w,
    y = tiny and updateButton.y + 4 or updateButton.y,
    w = updateButton.w,
    h = updateButton.h,
    text = "Cancel",
    bgColor = colors.red,
    activeColor = colors.red,
    action = function()
        window:close()
    end
})

local function errorOutput(msg)
    local out = fs.open("/errorlog", "w")
    out.write(msg)
    out.close()
end

window:addComponent(statusLabel)
window:addComponent(cancelButton)
window:addComponent(updateButton)

parallel.waitForAny(function()
    TXUI.Controller:startUpdateCycle()
end, function()
    local status, updateAvailable, pull = pcall(github.fetch, "/", "ruigouveiamaciel", "flexOS")

    if status then
        if not updateAvailable then
            statusLabel.text = tiny and "System is up to date.\nClosing this window\nin 3 seconds..."
                or "System is up to date.\nClosing this window in 3 seconds..."
            cancelButton.text = "Close"
            window:draw()

            sleep(3)
            return
        end

        statusLabel.text = tiny and "Update available,\ndo you want to update?\n"
            or "Update available, do you want to update?\n"
        statusLabel.textColor = colors.lime
        updateButton.textColor = colors.white
        updateButton.activeTextColor = updateButton.textColor
        updateButton.bgColor = colors.green
        updateButton.activeBgColor = updateButton.bgColor
        updateButton.action = function()
            os.queueEvent("updater_answer")
        end

        window:draw()

        parallel.waitForAny(function()
            os.pullEvent("updater_answer")
        end, function()
            sleep(15)
        end)

        statusLabel.text = "Downloading updates...\n"
        statusLabel.textColor = colors.white
        updateButton.textColor = colors.gray
        updateButton.activeTextColor = updateButton.textColor
        updateButton.bgColor = colors.lightGray
        updateButton.activeBgColor = updateButton.bgColor
        window:draw()

        local pullStatus, pullErr = pcall(pull)

        if pullStatus then
            statusLabel.text = "Succesfully updated!\nRebooting in 3 seconds...\n"
            statusLabel.textColor = colors.lime
            cancelButton.text = "Reboot now"
            cancelButton.action = function()
                os.reboot()
            end
            window:draw()

            sleep(3)
            os.reboot()
        else
            pullErr = pullErr or "INVALID ERROR MESSAGE"
            statusLabel.textColor = colors.red
            statusLabel.text = "Failed to download updates!\n" .. pullErr
            errorOutput(statusLabel.text)
            window:draw()
            sleep(7)
        end
    else
        local err = updateAvailable or "INVALID ERROR MESSAGE"
        statusLabel.textColor = colors.red
        statusLabel.text = tiny and ("Failed to fetch\nfor updates!\n" .. err) or
            ("Failed to fetch for updates!\n" .. err)
        errorOutput(statusLabel.text)
        window:draw()
        sleep(7)
    end
end)

TXUI.Controller:exit()
